<?php

/**
 * @file
 * Code for prepare project to public download.
 */

/**
 * @TODO
 * - Replace views enabling/disabling for Search API pages with adding search
 *   api database module and server.
 */

/**
 * Implements hook_permission().
 */
function druio_livetodev_permission() {
  return array(
    'administer druio_livetodev' => array(
      'title' => 'Access to Dru.io - Live to Dev settings',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function druio_livetodev_menu() {
  $items['admin/config/druio'] = array(
    'title' => 'Dru.io',
    'weight' => -50,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
  );

  $items['admin/config/druio/livetodev'] = array(
    'access arguments' => array('administer druio_livetodev'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('druio_livetodev_settings'),
    'title' => 'Live to development',
  );

  return $items;
}

/**
 * Settings form for module.
 *
 * @return mixed
 */
function druio_livetodev_settings() {
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => 'Create scrubbed database dump',
    '#weight' => 15,
    '#submit' => array('druio_livetodev_create_opensoruce_database'),
  );

  return $form;
}

/**
 * Created scrubbed dump of current live database.
 */
function druio_livetodev_create_opensoruce_database() {
  // This code require safe_mode = Off in php.ini.
  if (!ini_get('safe_mode')) {
    $scrub = Database::getConnectionInfo('scrubbing');

    // We continue only if settings.php contains data for scrubbing database.
    if ($scrub) {
      // Clear caches. We MUST do it before doing anything with two tables.
      drupal_flush_all_caches();

      // Create dump of production db.
      $production_dump = format_string(
        '@path/@filename@extension',
        array(
          '@path' => drupal_realpath('public://'),
          '@filename' => 'dump-' . time(),
          '@extension' => '.sql.gz',
        )
      );

      _druio_livetodev_mysql_dump('default', $production_dump);
      // Import dump to scrubbing db.
      _druio_livetodev_mysql_import('scrubbing', $production_dump);
      // Remove file after import.
      file_unmanaged_delete($production_dump);
      // Scrubbing data.
      _druio_livetodev_scrub_data();
      // Dump scrubbed database.
      $scrubbed_dump = format_string(
        '@path/@filename@extension',
        array(
          '@path' => drupal_realpath('public://'),
          '@filename' => 'database',
          '@extension' => '.sql.gz',
        )
      );
      _druio_livetodev_mysql_dump('scrubbing', $scrubbed_dump);
    }
    else {
      drupal_set_message(t('You must set scrubbing database connection to your settings.php to perform this operation.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Sorry, but this feature works only with php configuration with <strong>safe_mode = Off</strong>.'), 'warning');
  }
}

/**
 * Create mysql dump.
 *
 * @param string $connection_name
 * @param string $filepath
 *   Path where dump will save.
 *
 * @return string
 *   Shell command exit code. 0 - all fine.
 */
function _druio_livetodev_mysql_dump($connection_name, $filepath) {
  $database = Database::getConnectionInfo($connection_name);
  db_set_active($connection_name);

  $cmd = format_string(
    'mysqldump -u @username -p@password @database | gzip > @dumpname',
    array(
      '@username' => $database['default']['username'],
      '@password' => $database['default']['password'],
      '@database' => $database['default']['database'],
      '@dumpname' => $filepath,
    )
  );
  exec($cmd, $output, $result);
  db_set_active();
  return $result;
}

/**
 * Import dump to database.
 *
 * @param string $connection_name
 * @param string $filepath
 */
function _druio_livetodev_mysql_import($connection_name, $filepath) {
  $database = Database::getConnectionInfo($connection_name);
  db_set_active($connection_name);

  // Checkout, is database has tables.
  $tables = db_query('SHOW TABLES')->fetchCol();
  // Clear tables if they exist.
  if (!empty($tables)) {
    foreach ($tables as $table) {
      db_drop_table($table);
    }
  }

  $cmd = format_string(
    'gunzip -c @dumpname | mysql -u @username -p@password @database',
    array(
      '@username' => $database['default']['username'],
      '@password' => $database['default']['password'],
      '@database' => $database['default']['database'],
      '@dumpname' => $filepath,
    )
  );
  exec($cmd, $output, $result);
  db_set_active();
  return $result;
}

/**
 * Scrubbing important data.
 */
function _druio_livetodev_scrub_data() {
  Database::getConnectionInfo('scrubbing');
  db_set_active('scrubbing');

  // Drupal flush all caches not clear this table, but it's huge and have
  // to much old unused data.
  db_delete('cache_form')
    ->condition('expire', REQUEST_TIME, '<')
    ->execute();

  // Scrub all e-mail addresses.
  db_update('users')
    ->expression('mail', "CONCAT('user', uid, '@example.com')")
    ->condition('uid', 0, '>')
    ->execute();
  db_update('users')
    ->expression('init', "CONCAT('user', uid, '@example.com')")
    ->condition('uid', 0, '>')
    ->execute();

  // Destroy passwords.
  db_update('users')
    ->fields(array(
      'pass' => 'use drush user-login',
    ))
    ->execute();

  // Set for all users default avatar.
  db_update('users')
    ->fields(array(
      'picture' => 0,
    ))
    ->execute();

  // Disable modules for dev: hybridauth, mandrill.
  module_disable(array(
    'hybridauth',
    'mandrill',
  ));

  // Clean after HybridAuth.
  db_delete('hybridauth_session')->execute();
  db_delete('hybridauth_identity')->execute();

  db_delete('variable')
    ->condition('name', db_like('hybridauth_') . '%%', 'LIKE')
    ->execute();

  // Remove gitter webhook urls.
  db_delete('variable')
    ->condition('name', 'druio_gitter_webhook_urls')
    ->execute();
    
  // Remove mandrill API key.
  db_delete('variable')
    ->condition('name', 'mandrill_api_key')
    ->execute();

  // Remove all caches.
  drupal_flush_all_caches();
  db_truncate('cache_form')->execute();

  // Remove sessions.
  db_truncate('sessions')->execute();

  // Remove history.
  db_truncate('history')->execute();

  // Remove flood.
  db_truncate('flood')->execute();

  // Remove CAPTCHA data.
  db_truncate('captcha_sessions')->execute();

  // Remove xmlsitemap data.
  db_truncate('xmlsitemap')->execute();

  // Remove Solr server data.
  db_update('search_api_index')
    ->fields(array(
      'server' => 'NULL',
    ))
    ->condition('id', 2)
    ->execute();
  db_delete('search_api_server')
    ->condition('id', 6)
    ->execute();

  // Disable views for Search API and enable fallback just for nodes.
  $views_to_disable = array(
    'questions_page',
    'project_page',
    'posts_page',
  );

  // Get currently disabled views.
  $views_status = variable_get('views_defaults', array());

  // Disable views from array.
  foreach ($views_to_disable as $viewname) {
    $views_status[$viewname] = TRUE;
  }

  // Enable views list.
  $views_to_enable = array(
    'question_pages_nodes',
    'posts_page_node',
    'project_page_node',
  );

  // Enable them, just remove from disabled.
  foreach ($views_to_enable as $viewname) {
    unset($views_status[$viewname]);
  }

  variable_set('views_defaults', $views_status);

  // Empty cache for views.
  if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }

  db_set_active();
}

/**
 * Implements hook_cronapi().
 */
function druio_livetodev_cronapi() {
  $items = array();
  
  $items['druio_livetodev_cron_job'] = array(
    'title' => t('Created scrubbed database backup for public.'),
    'enabled' => TRUE,
    'tags' => array('druio'),
     'scheduler' => array(
       'name' => 'crontab',
      'crontab' => array(
        'rules' => array('0 3 * * *'), // run every day at 3 AM (night)
      ),
    ),
  );
  
  return $items;
}

/**
 * The callback for the cron job,
 */
function druio_livetodev_cron_job($job = NULL) {
  // Do backup.
  druio_livetodev_create_opensoruce_database();
}

